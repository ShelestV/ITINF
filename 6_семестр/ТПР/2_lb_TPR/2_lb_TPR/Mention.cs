using System;
using System.Collections.Generic;

namespace _2_lb_TPR
{
    class Mention
    {
        private string name;
        private double numericName;
        private double numericValue;
        private Criteria criteria;

        public Criteria Criteria { get => criteria; set => criteria = value; }
        public string Name { get => name; set => name = value; }
        public double NumericName
        {
            get => numericName;
            set
            {
                numericName = value;
                name = value.ToString();
            }
        }

        public double NumericValue
        {
            get { return numericValue; }
            set
            {
                if (0 >= value && value <= 1)
                {
                    numericValue = value;
                }
            }
        }

        public Mention(Mention other)
        {
            this.criteria = other.criteria;
            this.name = other.name;
            this.numericName = other.numericName;
            this.numericValue = other.numericValue;
        }

        public Mention(double numericName)
        {
            this.numericName = numericName;
            this.name = numericName.ToString();
        }

        public Mention(Criteria criteria, int indexOfCriteriaValue, int numberOfCriteriaValues)
        {
            this.criteria = criteria;
            this.name = indexOfCriteriaValue.ToString();
            this.numericName = indexOfCriteriaValue;
            // Calculate numeric value of criteria [0, 1]
            double doubleValue = (double)indexOfCriteriaValue / (double)numberOfCriteriaValues; // cast is needed here!!!
            this.numericValue = Math.Round(doubleValue * 1000) / 1000; // 3 symbols after point
        }

        public static Mention operator +(Mention first, Mention second)
        {
            if (first != null && second != null)
            {
                return new Mention(first.NumericName + second.NumericName);
            }
            return null;
        }

        public void SetNumericValue(int indexOfCriteriaValue, int numberOfCriteriaValues)
        {
            // Calculate numeric value of criteria [0, 1]
            double doubleValue = (double)indexOfCriteriaValue / (double)numberOfCriteriaValues; // cast is needed here!!!
            numericValue = Math.Round(doubleValue * 1000) / 1000; // 3 symbols after point
        }

        public bool isGreater(Mention other)
        {
            if (other == null) { throw new ArgumentNullException(); }
            return this.numericValue > other.numericValue;
        }

        public bool isLess(Mention other)
        {
            if (other == null) { throw new ArgumentNullException(); }
            return this.numericValue < other.numericValue;
        }

        public double CalculateDistanceTo(Mention other)
        {
            return Math.Abs(this.numericName - other.numericName);
        }

        public override string ToString()
        {
            return "k" + "(" + criteria.Name + name + ")";
        }

        public bool IsEqualName(string name)
        {
            if (name == null) { return false; }
            return name.Equals(name);
        }

        public override bool Equals(object obj)
        {
            if (obj == this) { return true; }
            if (obj == null) { return false; }

            return obj is Mention value &&
                   name == value.name &&
                   numericValue == value.numericValue;
        }

        public override int GetHashCode()
        {
            // Has been generated by Visual Studio
            int hashCode = 633634578;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(name);
            hashCode = hashCode * -1521134295 + numericValue.GetHashCode();
            return hashCode;
        }
    }
}
